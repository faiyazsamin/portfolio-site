---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "QA Specialist, Security Tester & Automation Builder with 5+ years experience in cybersecurity, automation, and threat analysis. Based in Dhaka, Bangladesh." } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content="Security Engineer, Penetration Testing, QA Automation, Cybersecurity, Red Team, Offensive Security" />
    <meta name="author" content="Sheikh Faiyaz Ahmed" />
    
    <!-- WebSite Structured Data for Site Name -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "WebSite",
      "name": "Sheikh Faiyaz Ahmed | Cybersecurity Engineer & Penetration Tester | CPTS Certified",
      "alternateName": ["Sheikh Faiyaz Ahmed", "Faiyaz Ahmed", "Sheikh Faiyaz", "faiyaz.tech"],
      "url": "https://faiyaz.tech/"
    }
    </script>
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:site_name" content="Sheikh Faiyaz Ahmed" />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
  </head>
  <body class="bg-black text-white overflow-x-hidden">
    <!-- Site Loader -->
    <div id="site-loader" class="fixed inset-0 z-50 flex items-center justify-center bg-gradient-to-br from-gray-900 via-gray-800 to-black">
      <div class="text-center">
        <!-- Animated Logo -->
        <div class="loader-logo mb-8">
          <div class="w-20 h-20 bg-gradient-to-br from-cyan-500 to-green-500 rounded-2xl flex items-center justify-center mx-auto mb-4 animate-pulse">
            <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-white">
              <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
            </svg>
          </div>
          <h1 class="text-2xl font-bold text-white mb-2">Sheikh Faiyaz</h1>
          <p class="text-gray-400 text-sm">Security Engineer & QA Specialist</p>
        </div>
        
        <!-- Loading Animation -->
        <div class="loader-animation">
          <div class="flex justify-center mb-4">
            <div class="flex space-x-2">
              <div class="w-3 h-3 bg-cyan-400 rounded-full animate-bounce" style="animation-delay: 0ms;"></div>
              <div class="w-3 h-3 bg-green-400 rounded-full animate-bounce" style="animation-delay: 150ms;"></div>
              <div class="w-3 h-3 bg-cyan-400 rounded-full animate-bounce" style="animation-delay: 300ms;"></div>
            </div>
          </div>
          <p class="text-gray-500 text-sm">Loading portfolio...</p>
        </div>
        
        <!-- Progress Bar -->
        <div class="loader-progress mt-6 w-64 mx-auto">
          <div class="bg-gray-800 rounded-full h-1 overflow-hidden">
            <div id="progress-bar" class="bg-gradient-to-r from-cyan-500 to-green-500 h-full rounded-full transition-all duration-300 ease-out" style="width: 0%"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content (initially hidden) -->
    <div id="main-content" style="visibility: hidden; opacity: 0;">
      <slot />
    </div>
    
    <script>
      // Basic mobile menu toggle (scroll handling moved to GSAP section)
      document.addEventListener('DOMContentLoaded', function() {
        // Mobile menu toggle
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        
        if (mobileMenuButton && mobileMenu) {
          mobileMenuButton.addEventListener('click', function() {
            mobileMenu.classList.toggle('hidden');
          });
        }

        // Floating hire button
        const floatingButton = document.getElementById('floating-hire-button');
        const hireModal = document.getElementById('hire-modal');
        const closeModal = document.getElementById('close-modal');
        
        if (floatingButton && hireModal && closeModal) {
          // Show/hide floating button on scroll
          window.addEventListener('scroll', function() {
            if (window.scrollY > 300) {
              floatingButton.classList.remove('hidden');
            } else {
              floatingButton.classList.add('hidden');
            }
          });

          // Show modal
          floatingButton.addEventListener('click', function() {
            hireModal.classList.remove('hidden');
          });

          // Close modal
          closeModal.addEventListener('click', function() {
            hireModal.classList.add('hidden');
          });

          // Close modal on backdrop click
          hireModal.addEventListener('click', function(e) {
            if (e.target === hireModal) {
              hireModal.classList.add('hidden');
            }
          });
        }
      });
    </script>

    <style>
      /* Loader Styles */
      #site-loader {
        backdrop-filter: blur(10px);
      }

      .loader-logo svg {
        animation: rotate 2s linear infinite;
      }

      @keyframes rotate {
        from {
          transform: rotate(0deg);
        }
        to {
          transform: rotate(360deg);
        }
      }

      /* Prevent body scroll during loading */
      body:not(.loaded) {
        overflow: hidden;
      }
    </style>

    <script>
      import { gsap } from 'gsap';
      import { ScrollTrigger } from 'gsap/ScrollTrigger';
      import { ScrollToPlugin } from 'gsap/ScrollToPlugin';
      
      gsap.registerPlugin(ScrollTrigger, ScrollToPlugin);

      // Site Loader Management with GSAP
      function initializeLoader() {
        const loader = document.getElementById('site-loader');
        const mainContent = document.getElementById('main-content');
        const progressBar = document.getElementById('progress-bar');
        const loaderLogo = document.querySelector('.loader-logo');
        const loaderAnimation = document.querySelector('.loader-animation');
        const loaderProgress = document.querySelector('.loader-progress');

        // Set initial states for loader elements
        gsap.set(loaderLogo, { opacity: 0, y: 30, scale: 0.8 });
        gsap.set(loaderAnimation, { opacity: 0, y: 20 });
        gsap.set(loaderProgress, { opacity: 0, y: 15 });

        // Animate loader entrance
        const loaderTl = gsap.timeline();
        loaderTl
          .to(loaderLogo, {
            opacity: 1,
            y: 0,
            scale: 1,
            duration: 0.8,
            ease: 'power2.out'
          })
          .to(loaderAnimation, {
            opacity: 1,
            y: 0,
            duration: 0.6,
            ease: 'power2.out'
          }, '-=0.4')
          .to(loaderProgress, {
            opacity: 1,
            y: 0,
            duration: 0.5,
            ease: 'power2.out'
          }, '-=0.3');

        // Progress bar animation
        let progress = 0;
        const progressInterval = setInterval(() => {
          progress += Math.random() * 15;
          if (progress > 90) {
            progress = 90;
          }
          if (progressBar) {
            gsap.to(progressBar, {
              width: progress + '%',
              duration: 0.3,
              ease: 'power2.out'
            });
          }
        }, 100);

        // Hide loader function
        function hideLoader() {
          if (progressBar) {
            gsap.to(progressBar, {
              width: '100%',
              duration: 0.3,
              ease: 'power2.out'
            });
          }
          
          clearInterval(progressInterval);
          
          setTimeout(() => {
            // Animate loader exit
            const exitTl = gsap.timeline();
            exitTl
              .to(loaderProgress, {
                opacity: 0,
                y: -15,
                duration: 0.3,
                ease: 'power2.in'
              })
              .to(loaderAnimation, {
                opacity: 0,
                y: -20,
                duration: 0.4,
                ease: 'power2.in'
              }, '-=0.2')
              .to(loaderLogo, {
                opacity: 0,
                y: -30,
                scale: 0.8,
                duration: 0.5,
                ease: 'power2.in'
              }, '-=0.3')
              .to(loader, {
                opacity: 0,
                duration: 0.5,
                ease: 'power2.in',
                onComplete: () => {
                  if (loader) {
                    loader.style.display = 'none';
                  }
                }
              }, '-=0.2');
            
            // Show main content
            if (mainContent) {
              mainContent.style.visibility = 'visible';
              gsap.to(mainContent, {
                opacity: 1,
                duration: 0.8,
                ease: 'power2.out'
              });
            }
            
            // Restore body scroll functionality
            document.body.classList.add('loaded');
            document.body.style.removeProperty('overflow');
          }, 300);
        }

        // Hide loader when page is fully loaded
        if (document.readyState === 'complete') {
          setTimeout(hideLoader, 1500);
        } else {
          window.addEventListener('load', () => {
            setTimeout(hideLoader, 1500);
          });
        }
      }

      // Smooth scrolling with GSAP
      document.addEventListener('DOMContentLoaded', function() {
        // Initialize loader
        initializeLoader();

        // Smooth scrolling for navigation links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
          anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const href = (e.target as HTMLAnchorElement).getAttribute('href');
            const target = href ? document.querySelector(href) : null;
            if (target) {
              // Calculate proper offset based on nav height
              const nav = document.getElementById('main-nav');
              const navHeight = nav ? nav.offsetHeight : 64;
              const offset = navHeight; // Add some padding for better visual separation
              
              gsap.to(window, {
                duration: 1.2,
                scrollTo: {
                  y: target,
                  offsetY: offset
                },
                ease: 'power2.out'
              });
            }
          });
        });

        // Mobile menu toggle
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        
        if (mobileMenuButton && mobileMenu) {
          mobileMenuButton.addEventListener('click', function() {
            if (mobileMenu.classList.contains('hidden')) {
              mobileMenu.classList.remove('hidden');
              gsap.fromTo(mobileMenu, 
                { opacity: 0, y: -20 },
                { opacity: 1, y: 0, duration: 0.3, ease: 'power2.out' }
              );
            } else {
              gsap.to(mobileMenu, {
                opacity: 0,
                y: -20,
                duration: 0.3,
                ease: 'power2.in',
                onComplete: () => {
                  mobileMenu.classList.add('hidden');
                }
              });
            }
          });
        }

        // Floating hire button with enhanced GSAP animations
        const floatingButton = document.getElementById('floating-hire-button');
        const hireModal = document.getElementById('hire-modal');
        const closeModal = document.getElementById('close-modal');
        
        if (floatingButton && hireModal && closeModal) {
          // Show/hide floating button on scroll
          ScrollTrigger.create({
            start: 300,
            end: 99999,
            onUpdate: (self) => {
              if (self.progress > 0) {
                gsap.to(floatingButton, {
                  opacity: 1,
                  scale: 1,
                  duration: 0.3,
                  ease: 'power2.out'
                });
                floatingButton.classList.remove('hidden');
              } else {
                gsap.to(floatingButton, {
                  opacity: 0,
                  scale: 0.8,
                  duration: 0.3,
                  ease: 'power2.in',
                  onComplete: () => {
                    floatingButton.classList.add('hidden');
                  }
                });
              }
            }
          });

          // Show modal with animation
          floatingButton.addEventListener('click', function() {
            hireModal.classList.remove('hidden');
            gsap.fromTo(hireModal,
              { opacity: 0 },
              { opacity: 1, duration: 0.3, ease: 'power2.out' }
            );
            gsap.fromTo(hireModal.querySelector('div'),
              { opacity: 0, scale: 0.8, y: 50 },
              { opacity: 1, scale: 1, y: 0, duration: 0.4, ease: 'back.out(1.7)' }
            );
          });

          // Close modal with animation
          function closeModalWithAnimation() {
            if (!hireModal) return;
            
            const modalContent = hireModal.querySelector('div');
            if (modalContent) {
              gsap.to(modalContent, {
                opacity: 0,
                scale: 0.8,
                y: 50,
                duration: 0.3,
                ease: 'power2.in'
              });
            }
            gsap.to(hireModal, {
              opacity: 0,
              duration: 0.3,
              ease: 'power2.in',
              onComplete: () => {
                if (hireModal) {
                  hireModal.classList.add('hidden');
                }
              }
            });
          }

          closeModal.addEventListener('click', closeModalWithAnimation);
          
          hireModal.addEventListener('click', function(e) {
            if (e.target === hireModal) {
              closeModalWithAnimation();
            }
          });

          // Close modal on Escape key
          document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && !hireModal.classList.contains('hidden')) {
              closeModalWithAnimation();
            }
          });
        }
      });
    </script>
  </body>
</html>