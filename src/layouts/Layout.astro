---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "QA Specialist, Security Tester & Automation Builder with 5+ years experience in cybersecurity, automation, and threat analysis. Based in Dhaka, Bangladesh." } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/png" href="/favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="keywords" content="Security Engineer, Penetration Testing, QA Automation, Cybersecurity, Red Team, Offensive Security" />
    <meta name="author" content="Sheikh Faiyaz Ahmed" />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
  </head>
  <body class="bg-black text-white overflow-x-hidden">
    <!-- Site Loader -->
    <div id="site-loader" class="fixed inset-0 z-50 flex items-center justify-center bg-gradient-to-br from-gray-900 via-gray-800 to-black">
      <div class="text-center">
        <!-- Animated Logo -->
        <div class="loader-logo mb-8">
          <div class="w-20 h-20 bg-gradient-to-br from-cyan-500 to-green-500 rounded-2xl flex items-center justify-center mx-auto mb-4 animate-pulse">
            <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-white">
              <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
            </svg>
          </div>
          <h1 class="text-2xl font-bold text-white mb-2">Sheikh Faiyaz</h1>
          <p class="text-gray-400 text-sm">Security Engineer & QA Specialist</p>
        </div>
        
        <!-- Loading Animation -->
        <div class="loader-animation">
          <div class="flex justify-center mb-4">
            <div class="flex space-x-2">
              <div class="w-3 h-3 bg-cyan-400 rounded-full animate-bounce" style="animation-delay: 0ms;"></div>
              <div class="w-3 h-3 bg-green-400 rounded-full animate-bounce" style="animation-delay: 150ms;"></div>
              <div class="w-3 h-3 bg-cyan-400 rounded-full animate-bounce" style="animation-delay: 300ms;"></div>
            </div>
          </div>
          <p class="text-gray-500 text-sm">Loading portfolio...</p>
        </div>
        
        <!-- Progress Bar -->
        <div class="loader-progress mt-6 w-64 mx-auto">
          <div class="bg-gray-800 rounded-full h-1 overflow-hidden">
            <div id="progress-bar" class="bg-gradient-to-r from-cyan-500 to-green-500 h-full rounded-full transition-all duration-300 ease-out" style="width: 0%"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content (initially hidden) -->
    <div id="main-content" style="visibility: hidden; opacity: 0;">
      <slot />
    </div>
    
    <script>
      // Smooth scrolling for navigation links
      document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
          anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const href = (e.target as HTMLAnchorElement).getAttribute('href');
            const target = href ? document.querySelector(href) : null;
            if (target) {
              target.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
              });
            }
          });
        });

        // Mobile menu toggle
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');
        
        if (mobileMenuButton && mobileMenu) {
          mobileMenuButton.addEventListener('click', function() {
            mobileMenu.classList.toggle('hidden');
          });
        }

        // Floating hire button
        const floatingButton = document.getElementById('floating-hire-button');
        const hireModal = document.getElementById('hire-modal');
        const closeModal = document.getElementById('close-modal');
        
        if (floatingButton && hireModal && closeModal) {
          // Show/hide floating button on scroll
          window.addEventListener('scroll', function() {
            if (window.scrollY > 300) {
              floatingButton.classList.remove('hidden');
            } else {
              floatingButton.classList.add('hidden');
            }
          });

          // Show modal
          floatingButton.addEventListener('click', function() {
            hireModal.classList.remove('hidden');
          });

          // Close modal
          closeModal.addEventListener('click', function() {
            hireModal.classList.add('hidden');
          });

          // Close modal on backdrop click
          hireModal.addEventListener('click', function(e) {
            if (e.target === hireModal) {
              hireModal.classList.add('hidden');
            }
          });
        }
      });
    </script>

    <style>
      /* Loader Styles */
      #site-loader {
        backdrop-filter: blur(10px);
      }

      .loader-logo svg {
        animation: rotate 2s linear infinite;
      }

      @keyframes rotate {
        from {
          transform: rotate(0deg);
        }
        to {
          transform: rotate(360deg);
        }
      }

      /* Prevent body scroll during loading */
      body:not(.loaded) {
        overflow: hidden;
      }
    </style>

    <script>
      // Site Loader Management
      function initializeLoader() {
        const loader = document.getElementById('site-loader');
        const mainContent = document.getElementById('main-content');
        const progressBar = document.getElementById('progress-bar');
        
        let progress = 0;
        const progressInterval = setInterval(() => {
          progress += Math.random() * 15;
          if (progress > 90) {
            progress = 90;
          }
          if (progressBar) {
            progressBar.style.width = progress + '%';
          }
        }, 100);

        // Wait for all resources to load
        function hideLoader() {
          if (progressBar) {
            progressBar.style.width = '100%';
          }
          
          clearInterval(progressInterval);
          
          setTimeout(() => {
            if (loader) {
              loader.style.transition = 'opacity 0.5s ease-out';
              loader.style.opacity = '0';
              setTimeout(() => {
                loader.style.display = 'none';
              }, 500);
            }
            
            if (mainContent) {
              mainContent.style.visibility = 'visible';
              mainContent.style.opacity = '1';
              mainContent.style.transition = 'opacity 0.5s ease-in';
            }
            
            // Restore body scroll functionality
            document.body.classList.add('loaded');
            document.body.style.removeProperty('overflow');
          }, 200);
        }

        // Hide loader when page is fully loaded
        if (document.readyState === 'complete') {
          setTimeout(hideLoader, 1000);
        } else {
          window.addEventListener('load', () => {
            setTimeout(hideLoader, 1000);
          });
        }
      }

      // Initialize loader immediately
      initializeLoader();
    </script>
  </body>
</html>