---
const skillCategories = [
  {
    title: "Security Testing",
    skills: ["Penetration Testing", "Risk Assessment", "Privilege Escalation", "Reverse Engineering", "OWASP Top 10", "Vulnerability Assessment"],
    color: "from-red-500 to-pink-500",
    icon: "shield"
  },
  {
    title: "QA Automation",
    skills: ["Playwright", "Cypress", "Selenium", "Postman", "Test Strategy", "API Testing"],
    color: "from-blue-500 to-cyan-500",
    icon: "bug"
  },
  {
    title: "AI Tools",
    skills: ["Prompt Engineering", "MCP", "AI Security Testing", "Data Scraping", "Anomaly Detection", "Automation Workflows"],
    color: "from-purple-500 to-indigo-500",
    icon: "brain"
  },
  {
    title: "Cloud Technologies",
    skills: ["AWS EC2", "S3", "Lambda", "IAM", "CloudWatch", "SQS"],
    color: "from-green-500 to-emerald-500",
    icon: "cloud"
  },
  {
    title: "Security Tools",
    skills: ["Burp Suite", "Metasploit", "Frida", "BloodHound", "Nessus", "OWASP ZAP"],
    color: "from-purple-500 to-violet-500",
    icon: "zap"
  },
  {
    title: "Programming",
    skills: ["Python", "JavaScript", "Bash", "PHP", "C", "SQL"],
    color: "from-orange-500 to-red-500",
    icon: "code"
  },
  {
    title: "Databases & More",
    skills: ["MySQL", "PostgreSQL", "Redis", "Docker", "Git", "Linux"],
    color: "from-teal-500 to-cyan-500",
    icon: "database"
  }
];
---

<section id="skills" class="py-20 bg-black">
  <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-16">
      <h2 class="text-3xl sm:text-4xl font-bold text-white mb-4">
        Technical <span class="text-cyan-400">Skills</span>
      </h2>
      <div class="w-24 h-1 bg-gradient-to-r from-cyan-500 to-green-500 mx-auto mb-6"></div>
      <p class="text-gray-400 text-lg max-w-2xl mx-auto">
        A comprehensive toolkit for security assessment, quality assurance, and automation
      </p>
    </div>

    <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
      {skillCategories.map((category) => (
        <div class="group">
          <div class="bg-gray-900/50 backdrop-blur-sm border border-gray-800 rounded-xl p-6 hover:border-cyan-500/50 transition-all duration-300 hover:scale-105 hover:shadow-lg hover:shadow-cyan-500/10">
            <div class="flex items-center gap-3 mb-4">
              <div class={`w-12 h-12 rounded-lg bg-gradient-to-br ${category.color} flex items-center justify-center`}>
                {category.icon === 'shield' && (
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-white">
                    <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
                  </svg>
                )}
                {category.icon === 'bug' && (
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-white">
                    <rect x="8" y="6" width="8" height="14" rx="4"></rect>
                    <path d="M6 6h4"></path>
                    <path d="M6 10h4"></path>
                    <path d="M6 14h4"></path>
                    <path d="M14 6h4"></path>
                    <path d="M14 10h4"></path>
                    <path d="M14 14h4"></path>
                  </svg>
                )}
                {category.icon === 'brain' && (
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-white">
                    <path d="M9.5 2A2.5 2.5 0 0 1 12 4.5v15a2.5 2.5 0 0 1-4.96.44A2.5 2.5 0 0 1 4.5 17v-2.5a2.5 2.5 0 0 1 0-5V7a2.5 2.5 0 0 1 5-5Z"></path>
                    <path d="M14.5 2A2.5 2.5 0 0 0 12 4.5v15a2.5 2.5 0 0 0 4.96.44A2.5 2.5 0 0 0 19.5 17v-2.5a2.5 2.5 0 0 0 0-5V7a2.5 2.5 0 0 0-5-5Z"></path>
                  </svg>
                )}
                {category.icon === 'cloud' && (
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-white">
                    <path d="M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"></path>
                  </svg>
                )}
                {category.icon === 'zap' && (
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-white">
                    <polygon points="13,2 3,14 12,14 11,22 21,10 12,10 13,2"></polygon>
                  </svg>
                )}
                {category.icon === 'code' && (
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-white">
                    <polyline points="16,18 22,12 16,6"></polyline>
                    <polyline points="8,6 2,12 8,18"></polyline>
                  </svg>
                )}
                {category.icon === 'database' && (
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-white">
                    <ellipse cx="12" cy="5" rx="9" ry="3"></ellipse>
                    <path d="M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"></path>
                    <path d="M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"></path>
                  </svg>
                )}
              </div>
              <h3 class="text-xl font-semibold text-white">{category.title}</h3>
            </div>
            
            <div class="space-y-2">
              {category.skills.map((skill) => (
                <div class="flex items-center gap-2">
                  <div class="w-2 h-2 bg-cyan-400 rounded-full flex-shrink-0"></div>
                  <span class="text-gray-300 text-sm">{skill}</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  /* Remove any existing CSS animations */
  * {
    animation: none !important;
  }
  
  /* Ensure smooth performance */
  .skills-header,
  .skills-grid,
  .skill-card {
    will-change: transform, opacity;
  }
  
  /* Optimize for better performance */
  .skill-item {
    backface-visibility: hidden;
    perspective: 1000px;
  }
</style>

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';
  
  gsap.registerPlugin(ScrollTrigger);

  document.addEventListener('DOMContentLoaded', () => {
    // Set initial states for Skills section
    gsap.set('#skills h2', { opacity: 0, y: 30 });
    gsap.set('#skills .w-24', { opacity: 0, scaleX: 0 });
    gsap.set('#skills p', { opacity: 0, y: 20 });
    gsap.set('#skills .group', { opacity: 0, y: 50, scale: 0.9 });
    gsap.set('#skills .w-12', { opacity: 0, scale: 0.5, rotation: -90 });
    gsap.set('#skills .text-xl.font-semibold', { opacity: 0, x: -20 });
    gsap.set('#skills .flex.items-center.gap-2', { opacity: 0, x: -15 });

    // Create Skills section timeline
    const skillsTl = gsap.timeline({
      scrollTrigger: {
        trigger: '#skills',
        start: 'top 80%',
        end: 'bottom 20%',
        toggleActions: 'play none none reverse'
      }
    });

    skillsTl
      // Header animation
      .to('#skills h2', {
        opacity: 1,
        y: 0,
        duration: 0.8,
        ease: 'power2.out'
      })
      .to('#skills .w-24', {
        opacity: 1,
        scaleX: 1,
        duration: 0.6,
        ease: 'power2.out'
      }, '-=0.3')
      .to('#skills p', {
        opacity: 1,
        y: 0,
        duration: 0.6,
        ease: 'power2.out'
      }, '-=0.2')
      
      // Skills cards stagger animation
      .to('#skills .group', {
        opacity: 1,
        y: 0,
        scale: 1,
        duration: 0.6,
        stagger: {
          amount: 0.8,
          from: "start"
        },
        ease: 'power2.out'
      }, '-=0.3');

    // Individual card element animations
    document.querySelectorAll('#skills .group').forEach((card) => {
      const cardTl = gsap.timeline({
        scrollTrigger: {
          trigger: card,
          start: 'top 85%',
          toggleActions: 'play none none reverse'
        }
      });

      cardTl
        .to(card.querySelector('.w-12'), {
          opacity: 1,
          scale: 1,
          rotation: 0,
          duration: 0.5,
          ease: 'back.out(1.7)'
        }, 0.2)
        .to(card.querySelector('.text-xl.font-semibold'), {
          opacity: 1,
          x: 0,
          duration: 0.4,
          ease: 'power2.out'
        }, '-=0.3')
        .to(card.querySelectorAll('.flex.items-center.gap-2'), {
          opacity: 1,
          x: 0,
          duration: 0.3,
          stagger: 0.05,
          ease: 'power2.out'
        }, '-=0.2');
    });

    // Hover animations for skill cards
    document.querySelectorAll('#skills .group > div').forEach(card => {
      card.addEventListener('mouseenter', () => {
        gsap.to(card, {
          scale: 1.03,
          duration: 0.3,
          ease: 'power2.out'
        });
        gsap.to(card.querySelector('.w-12'), {
          rotation: 5,
          scale: 1.1,
          duration: 0.3,
          ease: 'power2.out'
        });
      });
      
      card.addEventListener('mouseleave', () => {
        gsap.to(card, {
          scale: 1,
          duration: 0.3,
          ease: 'power2.out'
        });
        gsap.to(card.querySelector('.w-12'), {
          rotation: 0,
          scale: 1,
          duration: 0.3,
          ease: 'power2.out'
        });
      });
    });
  });
</script>