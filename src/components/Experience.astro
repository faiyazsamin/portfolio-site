---
const experiences = [
  {
    title: "Software Engineer",
    company: "Zelf Technologies Inc.",
    location: "Remote",
    period: "Jan 2025 – Present",
    type: "Current",
    description: "Security-focused web automation, red teaming, and AI-powered data governance workflows",
    achievements: [
      "Implementing advanced security automation frameworks",
      "Leading red team assessment initiatives",
      "Developing data governance and compliance workflows"
    ],
  },
  {
    title: "Assistant Lead Security Engineer",
    company: "bKash Limited",
    location: "Dhaka, Bangladesh",
    period: "Mar 2020 – Jan 2025",
    type: "Previous",
    description: "Led red team assessments, UAT for 200+ payment systems, automation reducing 1000+ manual hours",
    achievements: [
      "Conducted comprehensive red team assessments for mobile and web applications",
      "Managed UAT processes for 200+ payment systems",
      "Developed automation frameworks reducing 1000+ manual testing hours",
      "Led security incident response and vulnerability management",
      "Mentored junior security engineers and QA professionals"
    ],
  }
];
---

<section id="experience" class="py-20 bg-black">
  <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-16 experience-header">
      <h2 class="text-3xl sm:text-4xl font-bold text-white mb-4">
        Professional <span class="text-cyan-400">Experience</span>
      </h2>
      <div class="w-24 h-1 bg-gradient-to-r from-cyan-500 to-green-500 mx-auto mb-6 experience-underline"></div>
      <p class="text-gray-400 text-lg max-w-2xl mx-auto experience-description">
        Building secure systems and leading quality assurance initiatives
      </p>
    </div>

    <div class="relative">
      <!-- Timeline line -->
      <div class="absolute left-8 top-0 bottom-0 w-0.5 bg-gradient-to-b from-cyan-500 to-green-500 hidden md:block timeline-line"></div>
      
      <div class="space-y-12">
        {experiences.map((exp, index) => (
          <div class={`relative experience-item experience-item-${index}`}>
            <!-- Timeline dot -->
            <div class={`absolute left-6 w-4 h-4 bg-cyan-500 rounded-full border-4 border-black hidden md:block timeline-dot timeline-dot-${index}`}></div>
            
            <div class="md:ml-20">
              <div class="bg-gray-900/50 backdrop-blur-sm border border-gray-800 rounded-xl p-6 hover:border-cyan-500/50 transition-all duration-300 experience-card">
                <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between mb-4">
                  <div>
                    <h3 class="text-xl font-semibold text-white mb-1 experience-title">{exp.title}</h3>
                    <p class="text-cyan-400 font-medium mb-2 experience-company">{exp.company}</p>
                  </div>
                  
                  <div class="flex flex-col lg:items-end space-y-1 experience-meta">
                    <div class="flex items-center gap-2 text-gray-400 experience-period">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                        <line x1="16" y1="2" x2="16" y2="6"></line>
                        <line x1="8" y1="2" x2="8" y2="6"></line>
                        <line x1="3" y1="10" x2="21" y2="10"></line>
                      </svg>
                      <span class="text-sm">{exp.period}</span>
                    </div>
                    <div class="flex items-center gap-2 text-gray-400 experience-location">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                        <circle cx="12" cy="10" r="3"></circle>
                      </svg>
                      <span class="text-sm">{exp.location}</span>
                    </div>
                    {exp.type === 'Current' && (
                      <span class="bg-green-500 text-white px-2 py-1 rounded-full text-xs font-medium experience-status">
                        Current
                      </span>
                    )}
                  </div>
                </div>
                
                <p class="text-gray-300 mb-4 leading-relaxed experience-desc">{exp.description}</p>
                
                <div class="space-y-2 experience-achievements">
                  <h4 class="text-white font-medium flex items-center gap-2 achievements-title">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-cyan-400">
                      <rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
                      <line x1="8" y1="21" x2="16" y2="21"></line>
                      <line x1="12" y1="17" x2="12" y2="21"></line>
                    </svg>
                    Key Achievements
                  </h4>
                  <ul class="space-y-1 ml-6 achievements-list">
                    {exp.achievements.map((achievement, achIndex) => (
                      <li class={`text-gray-300 text-sm flex items-start gap-2 achievement-item achievement-item-${achIndex}`}>
                        <div class="w-1.5 h-1.5 bg-cyan-400 rounded-full mt-2 flex-shrink-0 achievement-bullet"></div>
                        {achievement}
                      </li>
                    ))}
                  </ul>
                </div>

                <!-- Reference Available -->
                {exp.type === 'Previous' && (
                  <div class="mt-4 p-3 bg-blue-500/10 rounded-lg border border-blue-500/30 experience-reference">
                    <p class="text-blue-400 text-sm flex items-center gap-2">
                      <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
                        <circle cx="9" cy="7" r="4"></circle>
                        <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
                        <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                      </svg>
                      Professional references available upon request
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Call to Action -->
    <div class="mt-16 text-center experience-cta">
      <div class="bg-gradient-to-r from-cyan-500/20 to-green-500/20 rounded-2xl p-8 backdrop-blur-sm border border-cyan-500/30">
        <h3 class="text-2xl font-semibold text-white mb-4 cta-title">Interested in My Experience?</h3>
        <p class="text-gray-300 max-w-2xl mx-auto mb-6 cta-description">
          I'd love to discuss how my security expertise, AI knowledge, and automation skills can benefit your team. 
          Let's schedule a conversation about your specific needs.
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center cta-buttons">
          <a
            href="mailto:faiyaz.samin@gmail.com?subject=Discussion about Experience&body=Hi Sheikh Faiyaz,%0D%0A%0D%0AI'd like to discuss your experience and how it might fit with our team's needs."
            class="bg-gradient-to-r from-cyan-500 to-green-500 hover:from-cyan-400 hover:to-green-400 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300 flex items-center justify-center gap-2 hover:scale-105 cta-button-primary"
          >
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
              <polyline points="22,6 12,13 2,6"></polyline>
            </svg>
            Discuss My Experience
          </a>
          <a
            href="/Sheikh_Faiyaz_Ahmed_CV.pdf"
            download
            class="border-2 border-cyan-500 text-cyan-400 hover:bg-cyan-500 hover:text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300 flex items-center justify-center gap-2 hover:scale-105 cta-button-secondary"
          >
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
              <polyline points="7,10 12,15 17,10"></polyline>
              <line x1="12" y1="15" x2="12" y2="3"></line>
            </svg>
            Download Full CV
          </a>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);

  document.addEventListener('DOMContentLoaded', () => {
    // Check if mobile device for optimized animations
    const isMobile = window.matchMedia('(max-width: 768px)').matches;

    // Set initial states
    gsap.set('.experience-header h2', { y: isMobile ? 30 : 50, opacity: 0 });
    gsap.set('.experience-underline', { scaleX: 0 });
    gsap.set('.experience-description', { y: isMobile ? 20 : 30, opacity: 0 });
    gsap.set('.timeline-line', { height: 0 });
    gsap.set('.experience-item', { y: 60, opacity: 0, scale: 0.95 });
    gsap.set('.timeline-dot', { scale: 0, rotation: 180 });
    gsap.set('.experience-card', { y: 30, opacity: 0 });
    gsap.set('.experience-title', { x: -20, opacity: 0 });
    gsap.set('.experience-company', { x: -15, opacity: 0 });
    gsap.set('.experience-meta', { x: 15, opacity: 0 });
    gsap.set('.experience-period', { opacity: 0, y: 10 });
    gsap.set('.experience-location', { opacity: 0, y: 10 });
    gsap.set('.experience-status', { scale: 0 });
    gsap.set('.experience-desc', { y: 20, opacity: 0 });
    gsap.set('.achievements-title', { x: -15, opacity: 0 });
    gsap.set('.achievement-item', { x: -20, opacity: 0 });
    gsap.set('.achievement-bullet', { scale: 0 });
    gsap.set('.experience-reference', { y: 15, opacity: 0 });
    gsap.set('.experience-cta', { y: 50, opacity: 0 });
    gsap.set('.cta-title', { y: 30, opacity: 0 });
    gsap.set('.cta-description', { y: 25, opacity: 0 });
    gsap.set('.cta-buttons', { y: 20, opacity: 0 });

    // Create main timeline for experience section
    const experienceTimeline = gsap.timeline({
      scrollTrigger: {
        trigger: '#experience',
        start: 'top 80%',
        end: 'bottom 20%',
        toggleActions: 'play none none reverse',
        markers: false
      }
    });

    // Header animations with consistent timing
    experienceTimeline
      .to('.experience-header h2', {
        y: 0,
        opacity: 1,
        duration: 0.7,
        ease: 'power2.out'
      })
      .to('.experience-underline', {
        scaleX: 1,
        duration: 0.5,
        ease: 'power2.out'
      }, '-=0.2')
      .to('.experience-description', {
        y: 0,
        opacity: 1,
        duration: 0.6,
        ease: 'power2.out'
      }, '-=0.2')
      
      // Timeline line animation
      .to('.timeline-line', {
        height: '100%',
        duration: 0.8,
        ease: 'power2.out'
      }, '-=0.2');

    // Experience items animation with consistent timing
    document.querySelectorAll('.experience-item').forEach((item) => {
      const itemTimeline = gsap.timeline({
        scrollTrigger: {
          trigger: item,
          start: 'top 85%',
          toggleActions: 'play none none reverse'
        }
      });

      itemTimeline
        // Experience item container with consistent duration
        .to(item, {
          y: 0,
          opacity: 1,
          scale: 1,
          duration: 0.6,
          ease: 'power2.out'
        })
        
        // Timeline dot with reduced duration
        .to(item.querySelector('.timeline-dot'), {
          scale: 1,
          rotation: 0,
          duration: 0.4,
          ease: 'back.out(1.7)'
        }, '-=0.4')
        
        // Experience card with consistent timing
        .to(item.querySelector('.experience-card'), {
          y: 0,
          opacity: 1,
          duration: 0.5,
          ease: 'power2.out'
        }, '-=0.3')
        
        // Title and company with faster, consistent timing
        .to(item.querySelector('.experience-title'), {
          x: 0,
          opacity: 1,
          duration: 0.4,
          ease: 'power2.out'
        }, '-=0.2')
        .to(item.querySelector('.experience-company'), {
          x: 0,
          opacity: 1,
          duration: 0.4,
          ease: 'power2.out'
        }, '-=0.2')
        
        // Meta information with consistent timing
        .to(item.querySelector('.experience-meta'), {
          x: 0,
          opacity: 1,
          duration: 0.4,
          ease: 'power2.out'
        }, '-=0.2')
        .to(item.querySelectorAll('.experience-period, .experience-location'), {
          opacity: 1,
          y: 0,
          duration: 0.3,
          stagger: 0.05,
          ease: 'power2.out'
        }, '-=0.2');

      // Status badge animation with consistent timing
      const statusBadge = item.querySelector('.experience-status');
      if (statusBadge) {
        itemTimeline.to(statusBadge, {
          scale: 1,
          duration: 0.3,
          ease: 'back.out(1.7)'
        }, '-=0.1');
      }

      // Description and achievements with smoother timing
      itemTimeline
        .to(item.querySelector('.experience-desc'), {
          y: 0,
          opacity: 1,
          duration: 0.4,
          ease: 'power2.out'
        }, '-=0.1')
        .to(item.querySelector('.achievements-title'), {
          x: 0,
          opacity: 1,
          duration: 0.4,
          ease: 'power2.out'
        }, '-=0.1')
        .to(item.querySelectorAll('.achievement-item'), {
          x: 0,
          opacity: 1,
          duration: 0.4,
          stagger: 0.05,
          ease: 'power2.out'
        }, '-=0.1')
        .to(item.querySelectorAll('.achievement-bullet'), {
          scale: 1,
          duration: 0.3,
          stagger: 0.05,
          ease: 'back.out(1.7)'
        }, '-=0.2');

      // Reference section with consistent timing
      const reference = item.querySelector('.experience-reference');
      if (reference) {
        itemTimeline.to(reference, {
          y: 0,
          opacity: 1,
          duration: 0.4,
          ease: 'power2.out'
        }, '-=0.1');
      }
    });

    // CTA section animation with consistent timing
    gsap.timeline({
      scrollTrigger: {
        trigger: '.experience-cta',
        start: 'top 85%',
        toggleActions: 'play none none reverse'
      }
    })
    .to('.experience-cta', {
      y: 0,
      opacity: 1,
      duration: 0.6,
      ease: 'power2.out'
    })
    .to('.cta-title', {
      y: 0,
      opacity: 1,
      duration: 0.4,
      ease: 'power2.out'
    }, '-=0.2')
    .to('.cta-description', {
      y: 0,
      opacity: 1,
      duration: 0.4,
      ease: 'power2.out'
    }, '-=0.1')
    .to('.cta-buttons', {
      y: 0,
      opacity: 1,
      duration: 0.4,
      ease: 'power2.out'
    }, '-=0.1');

    // Hover animations for experience cards
    document.querySelectorAll('.experience-card').forEach(card => {
      card.addEventListener('mouseenter', () => {
        gsap.to(card, {
          scale: 1.02,
          y: -5,
          duration: 0.3,
          ease: 'power2.out'
        });
      });
      
      card.addEventListener('mouseleave', () => {
        gsap.to(card, {
          scale: 1,
          y: 0,
          duration: 0.3,
          ease: 'power2.out'
        });
      });
    });

    // Button hover animations
    document.querySelectorAll('.cta-button-primary, .cta-button-secondary').forEach(button => {
      button.addEventListener('mouseenter', () => {
        gsap.to(button, {
          scale: 1.05,
          duration: 0.3,
          ease: 'power2.out'
        });
      });
      
      button.addEventListener('mouseleave', () => {
        gsap.to(button, {
          scale: 1,
          duration: 0.3,
          ease: 'power2.out'
        });
      });
    });

    // Parallax effect for timeline dots
    gsap.to('.timeline-dot', {
      y: -15,
      scrollTrigger: {
        trigger: '#experience',
        start: 'top bottom',
        end: 'bottom top',
        scrub: 1
      }
    });

    // Subtle parallax for experience items
    gsap.to('.experience-item', {
      y: -5,
      scrollTrigger: {
        trigger: '#experience',
        start: 'top bottom',
        end: 'bottom top',
        scrub: 1
      }
    });
  });
</script>

<style>
  /* Performance optimizations */
  .experience-header,
  .experience-item,
  .experience-card,
  .timeline-dot,
  .cta-buttons {
    will-change: transform, opacity;
  }
  
  .experience-card,
  .timeline-dot {
    backface-visibility: hidden;
    perspective: 1000px;
  }
  
  /* Timeline line gradient animation */
  .timeline-line {
    background: linear-gradient(180deg, #06b6d4 0%, #10b981 100%);
    box-shadow: 0 0 10px rgba(6, 182, 212, 0.3);
  }
  
  /* Mobile-specific optimizations */
  @media (max-width: 768px) {
    .experience-card {
      transition: transform 0.2s ease-out;
    }
    
    .timeline-dot {
      transition: transform 0.2s ease-out;
    }
    
    .cta-button-primary,
    .cta-button-secondary {
      transition: transform 0.15s ease-out;
    }
  }
  
  /* Hover effects enhancement */
  .experience-card:hover {
    box-shadow: 0 10px 30px rgba(6, 182, 212, 0.15);
  }
  
  .timeline-dot {
    box-shadow: 0 0 15px rgba(6, 182, 212, 0.5);
  }
</style>